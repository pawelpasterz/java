public class Array3 {
    public static int countClumps(int[] nums) {
        int clumpCount = 0;
        int flag = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1]) {
                if (flag == 0) {
                    flag = 1;
                    clumpCount++;
                }
            } else flag = 0;
        }
        return clumpCount;
    }
    public static int maxMirror(int[] nums) {
        int maxInd = 0;
        int currInd = 0;
        int inc;
        for (int i = 0; i < nums.length; i++) {
            inc = 0;
            for (int j = nums.length - 1; j >= 0; j--) {
                if (nums[i + inc] == nums[j]) {
                    currInd++;
                    inc++;
                    if (i + inc == nums.length) {
                        maxInd = maxInd > currInd ? maxInd : currInd;
                        currInd = 0;
                        break;
                    }
                } else {
                    maxInd = maxInd > currInd ? maxInd : currInd;
                    currInd = 0;
                }
            }
        }
        return maxInd;
    }
    public static int[] seriesUp(int n) {
        int[] temp = new int[n * (n + 1) / 2];
        int ind = temp.length - 1;
        for (int i = n; i > 0; i--) {
            for (int j = i; j > 0; j--)
                temp[ind--] = j;
        }
        return temp;
    }
    public static int[] squareUp(int n) {
        int[] temp = new int[n * n];
        int i = n -1;
        for (int val = 1; val <= n; val++) {
            for (int k = i; k < temp.length; k += n)
                temp[k] = val;
            i += n - 1;
        }
        return temp;
    }
    public static boolean linearIn(int[] outer, int[] inner) {
        for (int i = 0; i < inner.length; i++) {
            for (int j = 0; j < outer.length; j++) {
                if (inner[i] == outer[j]) break;
                if (j == outer.length - 1) return false;
            }
        }
        return true;
    }
    public static boolean canBalance(int[] nums) {
        int sum1 = 0;
        for (int i = 0; i < nums.length - 1; i++){
            sum1 += nums[i];
            int sum2 = 0;
            for (int j = i + 1; j < nums.length; j++) {
                sum2 += nums[j];
            }
            if (sum1 == sum2) return true;
        }
        return false;
    }
    public static int[] fix45(int[] nums) {
        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] == 4) {
                for (int j = 0; j < nums.length; j++) {
                    if (nums[j] == 5) {
                        if (j != 0)
                            if(nums[j - 1] == 4) continue;
                        int temp = nums[i + 1];
                        nums[i + 1] = nums[j];
                        nums[j] = temp;
                    }
                }
            }
        }
        return nums;
    }
    public static int[] fix34(int[] nums) {
        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] == 3) {
                for (int j = 0; j < nums.length; j++) {
                    if (nums[j] == 4) {
                        if (j != 0)
                            if(nums[j - 1] == 3) continue;
                        int temp = nums[i + 1];
                        nums[i + 1] = nums[j];
                        nums[j] = temp;
                    }
                }
            }
        }
        return nums;
    }
    public static int maxSpan(int[] nums) {
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = nums.length - 1; j >= i; j--){
                if (nums[i] == nums[j]) {
                    max = (j - i + 1) > max ? j - i + 1 : max;
                }
            }
        }
        return max;
    }
    public static void sh(int[] arr) {for (int e : arr) System.out.print(e + ", ");}
    public static void sh(Object ob) { System.out.println(ob); }
}
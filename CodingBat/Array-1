public class Array1 {
    public static int[] front11(int[] a, int[] b) {
        int temp = 0;
        if (a.length > 0)
            temp = 2;
        if (b.length > 0)
            temp ++;
        switch(temp) {
            case 1:
                return new int[]{b[0]};
            case 2:
                return new int[]{a[0]};
            case 3:
                return new int[]{a[0], b[0]};
            default:
                return new int[0];
        }
    }
    public static int[] make2(int[] a, int[] b) {
        int[] temp = new int[2];
        if (a.length == 0)
            return new int[]{b[0], b[1]};
        else if (a.length == 1)
            return new int[]{a[0], b[0]};
        else
            return new int[]{a[0], a[1]};
    }
    public static boolean unlucky1(int[] nums) {
        if (nums.length < 2)
            return false;
        int[] temp = new int[]{0, 1, nums.length - 2};
        for (int e : temp)
            if (nums[e] == 1 && nums[e + 1] == 3)
                return true;
        return false;
    }
    public static int[] frontPiece(int[] nums) {
        if (nums.length < 3)
            return nums;
        return new int[]{nums[0], nums[1]};
    }
    public static int maxTriple(int[] nums) {
        if (nums.length < 3)
            return nums[0] > nums[nums.length - 1] ? nums[0] : nums[nums.length - 1];
        int max = nums[0];
        max = nums[nums.length / 2] > max ? nums[nums.length / 2] : max;
        max = nums[nums.length - 1] > max ? nums[nums.length - 1] : max;
        return max;
    }
    public static int[] midThreee(int[] nums) {
        return new int[]{nums[nums.length / 2 - 1], nums[nums.length / 2], nums[nums.length / 2 + 1]};
    }
    public static int[] swapEnds(int[] nums) {
        int temp = nums[0];
        nums[0] = nums[nums.length -1];
        nums[nums.length - 1] = temp;
        return nums;
    }
    public static int[] plusTwo(int[] a, int[] b) {
        return new int[]{a[0], a[1], b[0], b[1]};
    }
    public static int[] makeMiddle(int[] nums) {
        if (nums.length == 2)
            return nums;
        return new int[]{nums[nums.length / 2 - 1], nums[nums.length / 2]};
    }
    public static int[] biggerTwo(int[] a, int[] b) {
        int aSum = a[0] + a[1];
        int bSum = b[0] + b[1];
        return aSum >= bSum ? a : b;
    }
    public static int start1(int[] a, int[] b) {
        int i = 0;
        if (a.length * b.length == 0) {
            if (a.length != 0 && a[0] == 1)
                i++;
            else if (b.length !=0 && b[0] == 1)
                i++;
        }
        else {
            if (a[0] == 1)
                i++;
            if (b[0] == 1)
                i++;
        }
        return i;
    }
    public static int[] fix23(int[] nums) {
        for (int i = 0; i < 2; i++) {
            if (nums[i] == 2 && nums[i + 1] == 3)
                nums[i + 1] = 0;
        }
        return nums;
    }
    public static boolean double23(int[] nums) {
        int c2 = 0;
        int c3 = 0;
        if (nums.length < 2)
            return false;
        for (int e : nums) {
            if (e == 2)
                c2++;
            else if (e == 3)
                c3++;
        }
        return c2 == 2 || c3 == 2 ? true : false;
    }
    public static int[] makeLast(int[] nums) {
        int[] temp = new int[2 * nums.length];
        temp[temp.length - 1] = nums[nums.length - 1];
        return temp;
    }
    public static boolean no23(int[] nums) {
        for (int e : nums) {
            if (e != 2 && e != 3)
                return true;
        }
        return false;
    }
    public static boolean has23(int[] nums) {
        for (int e : nums) {
            if (e == 2 || e == 3)
                return true;
        }
        return false;
    }
    public static int[] makeEnds(int[] nums) {
        return new int[]{nums[0], nums[nums.length - 1]};
    }
    public static  int[] middleWay(int[] a, int[] b) {
        return new int[]{a[1],b[1]};
    }
    public static int sum2(int[] nums) {
        if (nums.length == 0)
            return 0;
        else if (nums.length == 1)
            return nums[0];
        else
            return nums[0] + nums[1];
    }
    public static int[] maxEnd3(int[] nums) {
        int num = nums[0] > nums[2] ? nums[0] : nums[2];
        return new int[]{num, num, num};
    }
    public static int[] reverse3(int[] nums) {
        int temp = nums[0];
        nums[0] = nums[2];
        nums[2] = temp;
        return nums;
    }
    public static int[] rotateLeft3(int[] nums) {
        int[] temp = new int[3];
        temp[0] = nums[1];
        temp[1] = nums[2];
        temp[2] = nums[0];
        return temp;
    }
    public static int sum3(int[] nums) {
        int sum = 0;
        for (int e : nums)
            sum += e;
        return sum;
    }
    public static boolean commonEnd(int[] a, int[] b) {
        return (a[0] == b[0] || a[a.length - 1] == b[b.length -1]) ? true : false;
    }
    public static int[] makePi() {
        int[] pi = {3, 1, 4};
        return pi;
    }
    public static boolean sameFirstLast(int[] nums) {
        if ((nums.length > 0) &&(nums[0] == nums[nums.length - 1]))
            return true;
        return false;
    }
    public static String reverse(String str) {
        StringBuilder temp = new StringBuilder(str);
        return temp.reverse().toString();
    }
    public static boolean firstLast6(int[] nums) {
        if (nums[0] == 6 || nums[nums.length - 1] == 6)
            return true;
        return false;
    }
    public static void sh(Object ob) {
        System.out.println(ob);
    }
    public static void sh(int[] num) {
        for (int e : num)
            System.out.print(e + ", ");
    }
}

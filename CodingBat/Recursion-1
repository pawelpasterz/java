public class Recursion1 {
    public static int strDist(String str, String sub) {
        if (str.indexOf(sub) == -1) return 0;
        if (str.substring(0, sub.length()).equals(sub) && str.substring(str.length() - sub.length()).equals(sub))
            return str.length();
        if (!str.substring(0, sub.length()).equals(sub))
            return strDist(str.substring(1), sub);
        return strDist(str.substring(0, str.length() - 1), sub);
    }
    public static boolean strCopies(String str, String sub, int n) {
        if ((str.length() < sub.length() || !str.equals(sub)) && n == 0)
            return true;
        if (n < 0)
            return false;
        if (str.contains(sub))
           return strCopies(str.substring(str.indexOf(sub) + 1), sub, n - 1);
        else return false;
    }
    public static int strCount(String str, String sub) {
        if (str.length() < sub.length())
            return 0;
        if (str.equals(sub))
            return 1;
        return str.contains(sub) ? 1 + strCount(str.substring(str.indexOf(sub) + sub.length()), sub) : 0;
    }
    public static boolean nestParen(String str) {
        if (str.length() == 0)
            return true;
        if (str.length() == 1)
            return false;
        if (str.startsWith("(") && str.endsWith(")"))
            return nestParen(str.substring(1, str.length() - 1));
        return false;
    }
    public static String parenBit(String str) {
        if (str.length() == 0)
            return "";
        if (str.contains("("))
            return "(" + parenBit(str.substring(str.indexOf("(") + 1)) + ")";
        return str.substring(0, str.indexOf(")"));
    }
    public static int countHi2(String str) {
        if (str.length() <= 1)
            return 0;
        if (str.contains("hi")) {
            if (str.indexOf("hi") == 0)
                return 1 + countHi2(str.substring(str.indexOf("hi") + 2));
            else if (str.charAt(str.indexOf("hi") - 1) == 'x')
                return countHi2(str.substring(str.indexOf("hi") + 2));
            else
                return 1 + countHi2(str.substring(str.indexOf("hi") + 2));
        }
        else
            return countHi2(str.substring(str.indexOf("hi") + 2));
    }
    public static String stringClean(String str) {
        if (str.length() == 1)
            return str;
        return (str.charAt(0) == str.charAt(1) ? "" : str.charAt(0)) + stringClean(str.substring(1));
    }
    public static int count11(String str) {
        if (str.length() <= 1)
            return 0;
        return str.contains("11") ? 1 + count11(str.substring(str.indexOf("11") + 2)) : 0;
    }
    public static int countAbc(String str) {
        if (str.length() <= 2)
            return 0;
        int indA = str.indexOf("abc");
        int indB = str.indexOf("aba");
        if (indA != indB)
            return 1 + countAbc(str.substring((indA > indB ? (indB > -1 ? indB : indA) : indB) + 2));
        return 0;
    }
    public static int countPairs(String str) {
        if (str.length() < 3)
            return 0;
        return (str.charAt(0) == str.charAt(2) ? 1 : 0) + countPairs(str.substring(1));
    }
    public static String endX(String str) {
        if (str.length() == 0)
            return "";
        if (str.startsWith("x"))
            return endX(str.substring(1)) + "x";
        else
            return str.charAt(0) + endX(str.substring(1));
    }
    public static String pairStar(String str) {
        if (str.length() <= 1)
            return str;
        if (str.charAt(0) == str.charAt(1))
            return str.charAt(0) + "*" + pairStar(str.substring(1));
        else
            return str.charAt(0) + pairStar(str.substring(1));
    }
    public static String allStar(String str) {
        if (str.length() <= 1)
            return str;
        return str.charAt(0) + "*" + allStar(str.substring(1));
    }
    public static boolean array220(int[] nums, int index) {
        if (index == nums.length - 1 || nums.length == 0 )
            return false;
        return nums[index] * 10 == nums[index + 1] || array220(nums, index + 1);
   }
    public static int array11(int[] nums, int index) {
        if (index == nums.length)
            return 0;
        return nums[index] == 11 ? 1 + array11(nums, index + 1) : array11(nums, index + 1);
   }
    public static boolean array6(int[] nums, int index) {
        if (index == nums.length)
            return false;
        if (nums[index] == 6)
            return true;
        else
            return array6(nums, index + 1);
    }
    public static String noX(String str) {
        // I suppose using String.replace() is not allowed
        if (str.length() == 0)
            return "";
        return str.startsWith("x") ? noX(str.substring(1)) : str.substring(0, 1) + noX(str.substring(1));
    }
    public static String changePi(String str) {
        //I suppose using String.replace() is not allowed
        if (str.length() < 2)
            return str;
        if (str.contains("pi"))
            return str.substring(0, str.indexOf("pi")) + "3.14" + changePi(str.substring(str.indexOf("pi") + 2));
        else return str;
    }
    public static String changeXY(String str) {
        return str.replace("x", "y");
    }
    public static int countHi(String str) {
        if (str.length() <= 1)
            return 0;
        if (str.contains("hi"))
            return 1 + countHi(str.substring(str.indexOf("hi") + 2));
        else
            return countHi(str.substring(str.indexOf("hi") + 2));
    }
    public static int countX(String str) {
        if (str.length() == 0)
            return 0;
        return str.startsWith("x") ? 1 + countX(str.substring(1)) : countX(str.substring(1));
    }
    public static int powerN(int base, int n) {
        if (n == 0)
            return 1;
        return base * powerN(base, n - 1);
    }
    public static int count8(int n) {
        if (n == 0)
            return 0;
        if (n % 10 == 8) {
            if (n / 10 % 10 == 8)
                return 2 + count8(n / 10);
            else
                return 1 + count8(n / 10);
        }
        else
            return count8(n / 10);
    }
    public static int count7(int n) {
        if (n == 0)
            return 0;
        return n % 10 == 7 ? 1 + count7(n / 10) : count7(n / 10);
    }
    public static int sumDigits(int n) {
        if (n == 0)
            return 0;
        if (n % 10 != 0)
            return n % 10 + sumDigits(n / 10);
        return sumDigits(n / 10);
    }
    public static int triangle(int rows) {
        if (rows == 0)
            return 0;
        return rows + triangle(rows - 1);
    }
    public static int bunnyEars2(int bunnies) {
        int add = 2;
        if (bunnies == 0)
            return 0;
        else if (bunnies % 2 == 0)
            add = 3;
        return add + bunnyEars2(bunnies - 1);
    }
    public static int fibonacci(int n) {
        if (n == 0)
            return 0;
        else if (n == 1 || n == 2)
            return 1;
        else
            return fibonacci(n - 1) + fibonacci(n - 2);
    }
    public static int bunnyEars(int bunnies) {
        if (bunnies == 0)
            return 0;
        else
            return 2 + bunnyEars(bunnies - 1);
    }
    public static int factorial(int n) {
        if (n == 1)
            return 1;
        else
           return n * factorial(n - 1);
    }
    public static void sh(Object ob) {
        System.out.println(ob);
    }
}

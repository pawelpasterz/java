public class Recursion2 {
    public static boolean split53(int[] nums) { return split53Helper(0, nums, 0, 0); }
    public static boolean split53Helper(int start, int[] nums, int sum1, int sum2) {
        if (start >= nums.length) return sum1 == sum2;
        if (nums[start] % 5 == 0)
            return split53Helper(start + 1, nums, sum1 + nums[start], sum2);
        if (nums[start] % 3 == 0)
            return split53Helper(start + 1, nums, sum1, sum2 + nums[start]);
        if (split53Helper(start + 1, nums, sum1 + nums[start], sum2)) return true;
        if (split53Helper(start + 1, nums, sum1, sum2 + nums[start]))return true;
        return false;
    }
    public static boolean splitOdd10(int[] nums) { return splitOdd10Helper(0, nums, 0, 0); }
    public static boolean splitOdd10Helper(int start, int[] nums, int sum1, int sum2) {
        if (start >= nums.length) return sum1 % 10 == 0 && sum2 % 2 == 1;
        if (splitOdd10Helper(start + 1, nums, sum1 + nums[start], sum2)) return true;
        if (splitOdd10Helper(start + 1, nums, sum1, sum2 + nums[start])) return true;
        return false;
    }
    public static boolean splitArray(int[] nums) {
        return splitArrayHelper(0, nums, 0, 0);
    }
    public static boolean splitArrayHelper(int start, int[] nums, int sum1, int sum2) {
        if (start >= nums.length) return sum1 == sum2;
        if (splitArrayHelper(start + 1, nums, sum1 + nums[start], sum2)) return true;
        if (splitArrayHelper(start + 1, nums, sum1, sum2 + nums[start])) return true;
        return false;
    }
    public static boolean groupSumClump(int start, int[] nums, int target) {
        if (start >= nums.length) return target == 0;
        int ind = 0;
        while (start + ind < nums.length && nums[start] == nums[start + ind]) ind++;
        if (groupSumClump(start + ind, nums, target - nums[start] * ind)) return true;
        if (groupSumClump(start + ind, nums, target)) return true;
        return false;
    }
    public static boolean groupSum5(int start, int[] nums, int target) {
        if (start >= nums.length) return target == 0;
        if (nums[start] % 5 == 0) {
            if (start < nums.length - 1 && nums[start + 1] == 1)
                return groupSum5(start + 2, nums, target - nums[start]);
            else
                return groupSum5(start + 1, nums, target - nums[start]);
        }
        if (groupSum5(start + 1, nums, target - nums[start])) return true;
        if (groupSum5(start + 1, nums, target)) return true;
        return false;
    }
    public static boolean groupNoAdj(int start, int[] nums, int target) {
        if (start >= nums.length) return target == 0;
        if (groupNoAdj(start + 2, nums, target - nums[start])) return true;
        if (groupNoAdj(start + 1, nums, target)) return true;
        return false;
    }
    public static boolean groupSum6(int start, int[] nums, int target) {
        if (start == nums.length) return target == 0;
        if (nums[start] == 6) return groupSum6(start + 1, nums, target - 6);
        if (groupSum6(start + 1, nums, target - nums[start])) return true;
        if (groupSum6(start + 1, nums, target)) return true;
        return false;
    }
    public static boolean groupSum(int start, int[] nums, int target) {
        if (start >= nums.length) return target == 0;
        if (groupSum(start + 1, nums, target - nums[start])) return true;
        if (groupSum(start + 1, nums, target)) return true;
        return false;
    }
    public static void sh(Object ob) { System.out.println(ob); }
}
